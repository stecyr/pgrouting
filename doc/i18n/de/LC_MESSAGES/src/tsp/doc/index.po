# SOME DESCRIPTIVE TITLE.
# Copyright (C) pgRouting Contributors - Version 2.0.0 (ec59fc1 develop)
# This file is distributed under the same license as the pgRouting package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-09-20 23:09\n"
"PO-Revision-Date: 2013-09-20 14:14+0000\n"
"Last-Translator: Daniel Kastl\n"
"Language-Team: German (http://www.transifex.com/projects/p/pgrouting/language/de/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: de\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

# 0e6f2793c1b1476ebd75c46b61b256f2
#: ../../../src/tsp/doc/index.rst:13
msgid "pgr_tsp - Traveling Sales Person"
msgstr ""

# e8926c196e5f4b1bb6f951fd57b0b61b
#: ../../../src/tsp/doc/index.rst:23
msgid "Name"
msgstr "Name"

# 6ef19d8845284698bfbbc55f2f101614
#: ../../../src/tsp/doc/index.rst:25
msgid ""
"``pgr_tsp`` - Returns the best route from a start node via a list of nodes."
msgstr ""

# 11b42cfbdc244b1c8eda72abc4901218
#: ../../../src/tsp/doc/index.rst:26
msgid ""
"``pgr_tsp`` - Returns the best route order when passed a disance matrix."
msgstr ""

# d1d728c7ba634ce39639af970094196a
#: ../../../src/tsp/doc/index.rst:27
msgid ""
"``pgr_makeDistanceMatrix`` - Returns a Eucleadian distance Matrix from the "
"points provided in the sql result."
msgstr ""

# 7d153397ffee4e77814b2d9a2cf107f8
#: ../../../src/tsp/doc/index.rst:31
msgid "Synopsis"
msgstr "Ãœbersicht"

# 7a60767c8c2d47d2a19ea07bf2ffcdbf
#: ../../../src/tsp/doc/index.rst:33
msgid ""
"The travelling salesman problem (TSP) or travelling salesperson problem asks"
" the following question: Given a list of cities and the distances between "
"each pair of cities, what is the shortest possible route that visits each "
"city exactly once and returns to the origin city? This algoritm uses "
"simulated annealing to return a high quality approximate solution. Returns a"
" set of :ref:`pgr_costResult <type_cost_result>` (seq, id1, id2, cost) rows,"
" that make up a path."
msgstr ""

# 0cc6eb1dfd23458fa583a9d66109567a
#: ../../../src/tsp/doc/index.rst:41
msgid ""
"Returns a set of (seq integer, id1 integer, id2 integer, cost float8) that "
"is the best order to visit the nodes in the matrix. ``id1`` is the index "
"into the distance matrix. ``id2`` is the point id from the sql."
msgstr ""

# 5df6bffa1ecc44848a58933d1174ed74
#: ../../../src/tsp/doc/index.rst:43
msgid ""
"If no ``end_id`` is supplied or it is -1 or equal to the start_id then the "
"TSP result is assumed to be a circluar loop returning back to the start. If "
"``end_id`` is supplied then the route is assumed to start and end the the "
"designated ids."
msgstr ""

# a4d1488a0f674907a68203db59185e2e
#: ../../../src/tsp/doc/index.rst:52
msgid "Description"
msgstr "Beschreibung"

# 0a9cb33223b7484cbf36dc4fea821088
#: ../../../src/tsp/doc/index.rst:55
msgid "With Euclidean distances"
msgstr ""

# 2d16d6fc8c154b36b165f46a254348ed
#: ../../../src/tsp/doc/index.rst:56
msgid ""
"The TSP solver is based on ordering the points using straight line "
"(euclidean) distance [#f0]_ between nodes. The implementation is using an "
"approximation algorithm that is very fast. It is not an exact solution, but "
"it is guaranteed that a solution is returned after certain number of "
"iterations."
msgstr ""

# 3fa87a5db62248ce930af419ddfbeb9d
#: ../../../src/tsp/doc/index.rst:58
msgid ""
"a SQL query, which should return a set of rows with the following columns:"
msgstr ""

# 9d98b739c13a4a28876d938a596ed2f9
#: ../../../src/tsp/doc/index.rst:64
msgid "``int4`` identifier of the vertex"
msgstr ""

# 19604d9c92834183b4c731517aacd326
#: ../../../src/tsp/doc/index.rst:65
msgid "``float8`` x-coordinate"
msgstr ""

# 0cceff109a414f64acc77842b3d04302
#: ../../../src/tsp/doc/index.rst:66
msgid "``float8`` y-coordinate"
msgstr ""

# ea967e026fb84af4a6b83cd38dde14a4
#: ../../../src/tsp/doc/index.rst:68
msgid "``int4`` id of the start point"
msgstr ""

# 974f46c66f9f4d0b8ed038d609090827
#: ../../../src/tsp/doc/index.rst:69
msgid ""
"``int4`` id of the end point, This is *OPTIONAL*, if include the route is "
"optimized from start to end, otherwise it is assumed that the start and the "
"end are the same point."
msgstr ""

# 556bc47711f045bc96f823e4d2a6eec7
#: ../../../src/tsp/doc/index.rst:72
msgid "The function returns set of :ref:`type_cost_result`:"
msgstr ""

# 1bfa3a23ef324cdf8ad75e5f621ebd41
# aad3bf6cb202414684bbc0c7a788b049
#: ../../../src/tsp/doc/index.rst:74 ../../../src/tsp/doc/index.rst:107
msgid "row sequence"
msgstr ""

# a7faf760ab7e4134b42361cb00a84898
#: ../../../src/tsp/doc/index.rst:75
msgid "internal index to the distance matric"
msgstr ""

# 765aca8d9a794c8aa89bd7679b4f4c39
#: ../../../src/tsp/doc/index.rst:76
msgid "``id`` of the node"
msgstr ""

# 13ef3b4df33d4b43b9afb0bb110cc1c1
#: ../../../src/tsp/doc/index.rst:77
msgid "cost to traverse from the current node to the next node."
msgstr ""

# e5157623396b4bcf9b43b8e6bdb3ff25
#: ../../../src/tsp/doc/index.rst:80
msgid "Create a distance matrix"
msgstr ""

# f5160f438efd4417bf81ab29557b6fcd
#: ../../../src/tsp/doc/index.rst:81
msgid ""
"For users that need a distance matrix we have a simple function that takes "
"SQL in ``sql`` as described above and returns a record with ``dmatrix`` and "
"``ids``."
msgstr ""

# 161ee9d753a647f694a27b7e13b22766
#: ../../../src/tsp/doc/index.rst:87
msgid "The function returns a record of ``dmatrix``, ``ids``:"
msgstr ""

# 885d3c2b59364fbc9ac2fd2212f6c263
#: ../../../src/tsp/doc/index.rst:89
msgid "``float8[][]`` a symeteric Euclidean distance matrix based on ``sql``."
msgstr ""

# 39cf7de135574ef7b9641d2344c317da
#: ../../../src/tsp/doc/index.rst:90
msgid ""
"``integer[]`` an array of ids as they are ordered in the distance matrix."
msgstr ""

# e090d9a44a8f4836b9aa14ca8e73e53a
#: ../../../src/tsp/doc/index.rst:94
msgid "With distance matrix"
msgstr ""

# ad1c53e030ca4fed801c79406fc4849c
#: ../../../src/tsp/doc/index.rst:95
msgid ""
"For users, that do not want to use Euclidean distances, we also provode the "
"ability to pass a distance matrix that we will solve and return an ordered "
"list of nodes for the best order to visit each. It is up to the user to "
"fully populate the distance matrix."
msgstr ""

# 58177635b6b84ba89f76aaa9c13df235
#: ../../../src/tsp/doc/index.rst:97
msgid "``float[][]`` distance matrix of points"
msgstr ""

# 72935bb392524906a07b366087e685d4
#: ../../../src/tsp/doc/index.rst:98
msgid "``int4`` index of the start point"
msgstr ""

# 749a343fb89d4fb9a6e7364731a10591
#: ../../../src/tsp/doc/index.rst:99
msgid "``int4`` (optional) index of the end node"
msgstr ""

# 703bf21b9b33448ab071ac58901bd094
#: ../../../src/tsp/doc/index.rst:101
msgid ""
"The ``end`` node is an optional parameter, you can just leave it out if you "
"want a loop where the ``start`` is the depot and the route returns back to "
"the depot. If you include the ``end`` parameter, we optimize the path from "
"``start`` to ``end`` and minimize the distance of the route while include "
"the remaining points."
msgstr ""

# 9de794873afd4bfab7d027fcc31c280f
#: ../../../src/tsp/doc/index.rst:103
msgid ""
"The distance matrix is a multidimensional `PostgreSQL array type "
"<http://www.postgresql.org/docs/9.1/static/arrays.html>`_ that must be ``N x"
" N`` in size."
msgstr ""

# d06039bf077f4bcba6560d6daea72206
#: ../../../src/tsp/doc/index.rst:105
msgid "The result will be N records of ``[ seq, id ]``:"
msgstr ""

# cd19091cacc24215af33406ea233e617
#: ../../../src/tsp/doc/index.rst:108
msgid "index into the matrix"
msgstr ""

# 25d73fff4c154a48ae556eb1d0abd1a3
#: ../../../src/tsp/doc/index.rst:112
msgid "Footnotes"
msgstr ""

# fbd6cae5506446bfaa134b2be3fb4d30
#: ../../../src/tsp/doc/index.rst:113
msgid ""
"There was some thought given to pre-calculating the driving distances "
"between the nodes using Dijkstra, but then I read a paper (unfortunately I "
"don't remember who wrote it), where it was proved that the quality of TSP "
"with euclidean distance is only slightly worse than one with real distance "
"in case of normal city layout. In case of very sparse network or rivers and "
"bridges it becomes more inaccurate, but still wholly satisfactory. Of course"
" it is nice to have exact solution, but this is a compromise between quality"
" and speed (and development time also). If you need a more accurate "
"solution, you can generate a distance matrix and use that form of the "
"function to get your results."
msgstr ""

# c00ad98e226b4bb68b092d502f2b381a
#: ../../../src/tsp/doc/index.rst:117
msgid "History"
msgstr "Geschichte"

# 36afaf772fb94ff98e46348ddfe70a6f
#: ../../../src/tsp/doc/index.rst:118
msgid "Renamed in version 2.0.0"
msgstr ""

# a00718f3912c40bfa86252cd5261138f
#: ../../../src/tsp/doc/index.rst:119
msgid "GAUL dependency removed in version 2.0.0"
msgstr ""

# cd87d5893c7c4baeaf5a383604bf88e8
#: ../../../src/tsp/doc/index.rst:123
msgid "Examples"
msgstr "Beispiele"

# 0fc9c92b6e7f4ffab277dd20f53d4b63
#: ../../../src/tsp/doc/index.rst:125
msgid ""
"Using SQL parameter (all points from the table, atarting from 6 and ending "
"at 5). We have listed two queries in this example, the first might vary from"
" system to system because there are multiple equivalent answers. The second "
"query should be stable in that the length optimal route should be the same "
"regardless of order."
msgstr ""

# 57abfee18f3644a5af4786c1181beecf
#: ../../../src/tsp/doc/index.rst:159
msgid "Using distance matrix (A loop starting from 1)"
msgstr ""

# 40190c79969247b29536d98f99022ed1
#: ../../../src/tsp/doc/index.rst:161
msgid ""
"When using just the start node you are getting a loop that starts with 1, in"
" this case, and travels through the other nodes and is implied to return to "
"the start node from the last one in the list. Since this is a circle there "
"are at least two possible paths, one clockwise and one counter-clockwise "
"that will have the same length and be equall valid. So in the following "
"example it is also possible to get back a sequence of ids = {1,0,3,2} "
"instead of the {1,2,3,0} sequence listed below."
msgstr ""

# 2bffca16d7394d9b9dca3a978dcf42a5
#: ../../../src/tsp/doc/index.rst:175
msgid "Using distance matrix (Starting from 1, ending at 2)"
msgstr ""

# c80c06656d9b478a9e63408de57ffe0e
#: ../../../src/tsp/doc/index.rst:189
msgid ""
"Using the vertices table edge_table_vertices_pgr generated by "
":ref:`pgr_create_topology`. Again we have two queries where the first might "
"vary and the second is based on the overal path length."
msgstr ""

# 68bd55ba069c4aceb4b5fec0eaeecb97
#: ../../../src/tsp/doc/index.rst:226
msgid "The queries use the :ref:`sampledata` network."
msgstr ""

# cf7417d28dec41e28ddd8668fefd7f79
#: ../../../src/tsp/doc/index.rst:230
msgid "See Also"
msgstr "Siehe auch"

# ecb429b3eb684a878ab52d2ff00f27be
#: ../../../src/tsp/doc/index.rst:232
msgid ":ref:`type_cost_result`"
msgstr ""

# 23c3cd8de5be436599a875a58c06a3e5
#: ../../../src/tsp/doc/index.rst:233
msgid "http://en.wikipedia.org/wiki/Traveling_salesman_problem"
msgstr ""

# 1390ca6419954e818632a47837286efe
#: ../../../src/tsp/doc/index.rst:234
msgid "http://en.wikipedia.org/wiki/Simulated_annealing"
msgstr ""
